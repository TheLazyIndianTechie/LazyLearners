// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // For credentials login
  role          Role      @default(STUDENT)
  bio           String?
  website       String?
  location      String?
  privacySettings String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]
  enrollments       Enrollment[]
  createdCourses    Course[]
  forumPosts        ForumPost[]
  replies           Reply[]
  portfolio         Portfolio?
  progress          Progress[]
  quizAttempts      QuizAttempt[]
  projectSubmission ProjectSubmission[]
  certifications    Certification[]
  reviews           Review[]            @relation("UserReviews")
  payments          Payment[]
  licenseKeys       LicenseKey[]
  skills            UserSkill[]
  wishlist          Wishlist[]
  videoProgress     VideoProgress[]
  videoBookmarks    VideoBookmark[]
  lessonNotes       LessonNote[]
  lessonQuestions   LessonQuestion[]
  lessonAnswers     LessonAnswer[]
  exportJobs        ExportJob[]

  @@index([role]) // For filtering users by role (instructors, students, etc.)
  @@index([createdAt]) // For sorting users by registration date
  @@map("users")
}

model UserSkill {
  id        String   @id @default(cuid())
  skill     String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, skill])
}

model Wishlist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model Course {
  id          String      @id @default(cuid())
  title       String
  description String
  thumbnail   String?
  price       Float       @default(0)
  published   Boolean     @default(false)
  isFeatured  Boolean     @default(false)
  viewCount   Int         @default(0)
  category    Category
  engine      GameEngine?
  difficulty  Difficulty
  duration    Int // in minutes
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  instructor   User                @relation(fields: [instructorId], references: [id])
  instructorId String
  modules      Module[]
  enrollments  Enrollment[]
  reviews      Review[]
  progress     Progress[]
  payments     Payment[]
  licenseKeys  LicenseKey[]
  requirements CourseRequirement[]
  objectives   CourseObjective[]
  tags         CourseTag[]
  wishlists    Wishlist[]

  @@index([category]) // For filtering courses by category
  @@index([published]) // For filtering published vs draft courses
  @@index([instructorId]) // For finding instructor's courses
  @@index([difficulty]) // For filtering by difficulty level
  @@index([engine]) // For filtering by game engine
  @@index([createdAt]) // For sorting courses by creation date
  @@index([category, published]) // Composite index for common query pattern
  @@index([published, difficulty]) // For filtering published courses by difficulty
}

model CourseRequirement {
  id          String   @id @default(cuid())
  requirement String
  order       Int
  createdAt   DateTime @default(now())

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  @@unique([courseId, requirement])
}

model CourseObjective {
  id        String   @id @default(cuid())
  objective String
  order     Int
  createdAt DateTime @default(now())

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  @@unique([courseId, objective])
}

model CourseTag {
  id        String   @id @default(cuid())
  tag       String
  createdAt DateTime @default(now())

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  @@unique([courseId, tag])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  duration    Int // in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  lessons  Lesson[]

  @@index([courseId]) // For finding all modules in a course
  @@index([courseId, order]) // For ordered module retrieval
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        LessonType
  content     String? // JSON content based on type
  order       Int
  duration    Int // in minutes
  videoUrl    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Video-specific metadata
  videoDuration    Int? // Video duration in seconds
  videoMetadata    String? // JSON: {qualities: string[], bitrate: number, resolution: string, frameRate: number}
  videoThumbnails  String? // JSON array of thumbnail URLs

  module         Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId       String
  quiz           Quiz?
  progress       Progress[]
  resources      LessonResource[]
  videoProgress  VideoProgress[]
  videoBookmarks VideoBookmark[]
  lessonNotes    LessonNote[]
  questions      LessonQuestion[]

  @@index([moduleId]) // For finding all lessons in a module
  @@index([moduleId, order]) // For ordered lesson retrieval
  @@index([type]) // For filtering lessons by type
}

model LessonResource {
  id        String   @id @default(cuid())
  title     String
  url       String
  type      String // 'document', 'link', 'download', etc.
  order     Int
  createdAt DateTime @default(now())

  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  @@index([lessonId]) // For finding all resources for a lesson
}

model Quiz {
  id           String   @id @default(cuid())
  title        String
  description  String?
  questions    String // JSON array of questions
  timeLimit    Int? // in minutes
  passingScore Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  lesson   Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String        @unique
  attempts QuizAttempt[]
}

model QuizAttempt {
  id          String   @id @default(cuid())
  score       Int
  maxScore    Int
  answers     String // JSON object with answers
  completedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String

  @@index([userId]) // For finding all quiz attempts by a user
  @@index([quizId]) // For finding all attempts for a quiz
  @@index([userId, quizId]) // For finding user's attempts on a specific quiz
  @@index([completedAt]) // For sorting attempts by date
}

model Enrollment {
  id          String           @id @default(cuid())
  status      EnrollmentStatus @default(ACTIVE)
  enrolledAt  DateTime         @default(now())
  completedAt DateTime?

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([userId, courseId])
  @@index([userId]) // For finding all enrollments for a user
  @@index([courseId]) // For finding all enrollments for a course
  @@index([status]) // For filtering enrollments by status
  @@index([userId, status]) // For finding user's active/completed enrollments
  @@index([enrolledAt]) // For sorting enrollments by date
}

model Progress {
  id                   String    @id @default(cuid())
  completionPercentage Float     @default(0)
  timeSpent            Int       @default(0) // in minutes
  lastAccessed         DateTime  @default(now())
  completed            Boolean   @default(false)
  completedAt          DateTime? // Timestamp when lesson/course was completed

  user     User    @relation(fields: [userId], references: [id])
  userId   String
  course   Course  @relation(fields: [courseId], references: [id])
  courseId String
  lesson   Lesson? @relation(fields: [lessonId], references: [id])
  lessonId String?

  @@unique([userId, courseId, lessonId])
  @@index([userId]) // For finding all progress for a user
  @@index([courseId]) // For finding all progress for a course
  @@index([lessonId]) // For finding all progress for a lesson
  @@index([completed]) // For filtering completed/incomplete lessons
  @@index([userId, courseId]) // For finding user's progress in a course
  @@index([userId, completed]) // For finding user's completed lessons
  @@index([lastAccessed]) // For sorting by recently accessed
}

model VideoProgress {
  id                   String   @id @default(cuid())
  watchTime            Int      @default(0) // Total watch time in seconds
  completionPercentage Float    @default(0) // Percentage of video watched (0-100)
  lastPosition         Int      @default(0) // Last playback position in seconds
  resumePosition       Int      @default(0) // Position to resume from in seconds
  qualityPreference    String? // User's preferred video quality (e.g., "720p")
  playbackSpeed        Float    @default(1.0) // Playback speed (0.25 to 2.0)
  sessionsCount        Int      @default(0) // Number of viewing sessions
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  @@unique([userId, lessonId])
  @@index([userId]) // For finding all video progress for a user
  @@index([lessonId]) // For finding all progress for a lesson
  @@index([userId, lessonId]) // For finding user's progress on a specific lesson
  @@index([completionPercentage]) // For filtering by completion
  @@index([updatedAt]) // For sorting by recently watched
}

model VideoBookmark {
  id        String   @id @default(cuid())
  position  Int // Timestamp position in video (seconds)
  note      String? // User's note at this timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  @@index([userId]) // For finding all bookmarks for a user
  @@index([lessonId]) // For finding all bookmarks for a lesson
  @@index([userId, lessonId]) // For finding user's bookmarks on a specific lesson
  @@index([createdAt]) // For sorting bookmarks by date
  @@index([position]) // For sorting bookmarks by position in video
}

model Review {
  id        String   @id @default(cuid())
  rating    Int // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation("UserReviews", fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([userId, courseId])
  @@index([courseId]) // For finding all reviews for a course
  @@index([userId]) // For finding all reviews by a user
  @@index([rating]) // For filtering reviews by rating
  @@index([createdAt]) // For sorting reviews by date
}

model Portfolio {
  id           String   @id @default(cuid())
  title        String
  description  String?
  isPublic     Boolean  @default(true)
  customDomain String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
  projects Project[]
}

model Project {
  id          String      @id @default(cuid())
  title       String
  description String
  thumbnail   String?
  engine      GameEngine?
  webglBuild  String? // URL to WebGL build
  sourceCode  String? // URL to source code
  liveDemo    String? // URL to live demo
  isPublic    Boolean     @default(true)
  featured    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  portfolio   Portfolio           @relation(fields: [portfolioId], references: [id])
  portfolioId String
  submissions ProjectSubmission[]
  tags        ProjectTag[]

  @@index([portfolioId]) // For finding all projects in a portfolio
  @@index([isPublic]) // For filtering public/private projects
  @@index([featured]) // For finding featured projects
  @@index([engine]) // For filtering projects by game engine
  @@index([createdAt]) // For sorting projects by date
}

model ProjectTag {
  id        String   @id @default(cuid())
  tag       String
  createdAt DateTime @default(now())

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([projectId, tag])
}

model ProjectSubmission {
  id            String    @id @default(cuid())
  submissionUrl String
  score         Float?
  feedback      String?
  submittedAt   DateTime  @default(now())
  gradedAt      DateTime?

  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@index([userId]) // For finding all submissions by a user
  @@index([projectId]) // For finding all submissions for a project
  @@index([submittedAt]) // For sorting submissions by date
}

model ForumPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String
  likes     Int      @default(0)
  views     Int      @default(0)
  pinned    Boolean  @default(false)
  locked    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User           @relation(fields: [authorId], references: [id])
  authorId String
  replies  Reply[]
  tags     ForumPostTag[]

  @@index([category]) // For filtering forum posts by category
  @@index([pinned]) // For finding pinned posts
  @@index([authorId]) // For finding user's forum posts
  @@index([createdAt]) // For sorting posts by date
  @@index([category, pinned]) // For showing pinned posts in a category
  @@index([likes]) // For sorting by popularity
}

model ForumPostTag {
  id        String   @id @default(cuid())
  tag       String
  createdAt DateTime @default(now())

  forumPost   ForumPost @relation(fields: [forumPostId], references: [id], onDelete: Cascade)
  forumPostId String

  @@unique([forumPostId, tag])
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  post     ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String
  parent   Reply?    @relation("ReplyToReply", fields: [parentId], references: [id])
  parentId String?
  replies  Reply[]   @relation("ReplyToReply")

  @@index([postId]) // For finding all replies to a post
  @@index([authorId]) // For finding all replies by a user
  @@index([parentId]) // For finding nested replies
  @@index([createdAt]) // For sorting replies by date
}

model Certification {
  id              String    @id @default(cuid())
  name            String
  description     String?
  issuer          String
  credentialId    String    @unique
  badgeUrl        String?
  verificationUrl String?
  issuedAt        DateTime  @default(now())
  expiresAt       DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId]) // For finding all certifications for a user
  @@index([issuedAt]) // For sorting certifications by date
  @@index([expiresAt]) // For finding expiring certifications
}

enum Category {
  GAME_PROGRAMMING
  GAME_DESIGN
  GAME_ART
  GAME_AUDIO
  UNITY_DEVELOPMENT
  UNREAL_DEVELOPMENT
  GODOT_DEVELOPMENT
  MOBILE_GAMES
  INDIE_DEVELOPMENT
  VR_AR_DEVELOPMENT
}

enum GameEngine {
  UNITY
  UNREAL
  GODOT
  CUSTOM
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LessonType {
  VIDEO
  INTERACTIVE
  QUIZ
  PROJECT
  READING
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

model Payment {
  id            String        @id @default(cuid())
  dodoPaymentId String        @unique // Payment ID from Dodo Payments
  status        PaymentStatus @default(PENDING)
  amount        Int // Amount in smallest currency unit (cents)
  currency      String        @default("USD")
  paymentMethod String?
  discountCode  String?
  metadata      String? // JSON metadata from Dodo
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  completedAt   DateTime?

  user       User        @relation(fields: [userId], references: [id])
  userId     String
  course     Course      @relation(fields: [courseId], references: [id])
  courseId   String
  licenseKey LicenseKey?

  @@index([userId]) // For finding all payments for a user
  @@index([courseId]) // For finding all payments for a course
  @@index([status]) // For filtering payments by status
  @@index([createdAt]) // For sorting payments by date
  @@index([userId, status]) // For finding user's succeeded/failed payments
}

model LicenseKey {
  id               String           @id @default(cuid())
  key              String           @unique
  dodoLicenseKeyId String?          @unique // License key ID from Dodo
  status           LicenseKeyStatus @default(ACTIVE)
  activationsLimit Int?
  activationsCount Int              @default(0)
  expiresAt        DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  payment   Payment? @relation(fields: [paymentId], references: [id])
  paymentId String?  @unique

  @@unique([userId, courseId])
  @@index([userId]) // For finding all license keys for a user
  @@index([courseId]) // For finding all license keys for a course
  @@index([status]) // For filtering license keys by status
  @@index([expiresAt]) // For finding expiring/expired licenses
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
  PROCESSING
  REQUIRES_PAYMENT_METHOD
}

enum LicenseKeyStatus {
  ACTIVE
  EXPIRED
  DISABLED
  REVOKED
}

model Template {
  id        String   @id @default(cuid())
  type      String // 'module' or 'lesson'
  name      String
  category  String // e.g., 'introduction', 'project-based', 'quiz', etc.
  data      String // JSON data containing the template structure
  isPublic  Boolean  @default(false)
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type]) // For filtering templates by type
  @@index([category]) // For filtering templates by category
  @@index([createdBy]) // For finding user's templates
  @@index([isPublic]) // For finding public templates
  @@index([type, category]) // For finding templates by type and category
}

model LessonNote {
  id        String   @id @default(cuid())
  content   String   // Rich text content
  timecode  Int?     // Optional video timestamp (seconds)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  @@index([userId, lessonId])
  @@index([createdAt])
}

model LessonQuestion {
  id        String   @id @default(cuid())
  title     String
  content   String
  resolved  Boolean  @default(false)
  pinned    Boolean  @default(false)
  upvotes   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  lesson   Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String
  answers  LessonAnswer[]

  @@index([lessonId, createdAt])
  @@index([userId])
  @@index([resolved])
}

model LessonAnswer {
  id         String   @id @default(cuid())
  content    String
  accepted   Boolean  @default(false)
  upvotes    Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  question   LessonQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  @@index([questionId, createdAt])
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ExportType {
  POSTHOG
  METABASE
  REVENUE
  VIDEO
  PERFORMANCE
}

enum ExportFormat {
  CSV
  PDF
  JSON
  XLSX
}

model ExportJob {
  id          String       @id @default(cuid())
  userId      String
  type        ExportType
  resourceId  String?      // For PostHog/Metabase resource IDs
  format      ExportFormat
  filters     String?      // JSON string of applied filters
  status      ExportStatus @default(PENDING)
  progress    Float        @default(0) // 0-100
  fileUrl     String?
  fileSize    Int?
  error       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  completedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([userId, status])
}
