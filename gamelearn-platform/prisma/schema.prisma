// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials login
  role          Role      @default(STUDENT)
  bio           String?
  website       String?
  location      String?
  skills        String? // JSON string of skills
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]
  enrollments       Enrollment[]
  createdCourses    Course[]
  forumPosts        ForumPost[]
  replies           Reply[]
  portfolio         Portfolio?
  progress          Progress[]
  quizAttempts      QuizAttempt[]
  projectSubmission ProjectSubmission[]
  certifications    Certification[]
  reviews           Review[]           @relation("UserReviews")
  payments          Payment[]
  licenseKeys       LicenseKey[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model Course {
  id          String      @id @default(cuid())
  title       String
  description String
  thumbnail   String?
  price       Float       @default(0)
  published   Boolean     @default(false)
  category    Category
  engine      GameEngine?
  difficulty  Difficulty
  duration    Int // in minutes
  requirements String? // JSON array
  objectives   String? // JSON array
  tags         String? // JSON array
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  instructor    User         @relation(fields: [instructorId], references: [id])
  instructorId  String
  modules       Module[]
  enrollments   Enrollment[]
  reviews       Review[]
  progress      Progress[]
  payments      Payment[]
  licenseKeys   LicenseKey[]
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  duration    Int // in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  lessons  Lesson[]
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        LessonType
  content     String? // JSON content based on type
  order       Int
  duration    Int // in minutes
  videoUrl    String?
  resources   String? // JSON array of resources
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  module   Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String
  quiz     Quiz?
  progress Progress[]
}

model Quiz {
  id           String    @id @default(cuid())
  title        String
  description  String?
  questions    String // JSON array of questions
  timeLimit    Int? // in minutes
  passingScore Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  lesson    Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String        @unique
  attempts  QuizAttempt[]
}

model QuizAttempt {
  id          String   @id @default(cuid())
  score       Int
  maxScore    Int
  answers     String // JSON object with answers
  completedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String
}

model Enrollment {
  id          String          @id @default(cuid())
  status      EnrollmentStatus @default(ACTIVE)
  enrolledAt  DateTime        @default(now())
  completedAt DateTime?

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([userId, courseId])
}

model Progress {
  id                   String   @id @default(cuid())
  completionPercentage Float    @default(0)
  timeSpent            Int      @default(0) // in minutes
  lastAccessed         DateTime @default(now())
  completed            Boolean  @default(false)

  user     User    @relation(fields: [userId], references: [id])
  userId   String
  course   Course  @relation(fields: [courseId], references: [id])
  courseId String
  lesson   Lesson? @relation(fields: [lessonId], references: [id])
  lessonId String?

  @@unique([userId, courseId, lessonId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation("UserReviews", fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([userId, courseId])
}

model Portfolio {
  id           String    @id @default(cuid())
  title        String
  description  String?
  isPublic     Boolean   @default(true)
  customDomain String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
  projects Project[]
}

model Project {
  id           String      @id @default(cuid())
  title        String
  description  String
  thumbnail    String?
  engine       GameEngine?
  webglBuild   String? // URL to WebGL build
  sourceCode   String? // URL to source code
  liveDemo     String? // URL to live demo
  tags         String? // JSON array
  isPublic     Boolean     @default(true)
  featured     Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId String
  submissions ProjectSubmission[]
}

model ProjectSubmission {
  id            String    @id @default(cuid())
  submissionUrl String
  score         Float?
  feedback      String?
  submittedAt   DateTime  @default(now())
  gradedAt      DateTime?

  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

model ForumPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String
  tags      String? // JSON array
  likes     Int      @default(0)
  views     Int      @default(0)
  pinned    Boolean  @default(false)
  locked    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author  User    @relation(fields: [authorId], references: [id])
  authorId String
  replies Reply[]
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  post     ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String
  parent   Reply?    @relation("ReplyToReply", fields: [parentId], references: [id])
  parentId String?
  replies  Reply[]   @relation("ReplyToReply")
}

model Certification {
  id              String    @id @default(cuid())
  name            String
  description     String?
  issuer          String
  credentialId    String    @unique
  badgeUrl        String?
  verificationUrl String?
  issuedAt        DateTime  @default(now())
  expiresAt       DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum Category {
  GAME_PROGRAMMING
  GAME_DESIGN
  GAME_ART
  GAME_AUDIO
  UNITY_DEVELOPMENT
  UNREAL_DEVELOPMENT
  GODOT_DEVELOPMENT
  MOBILE_GAMES
  INDIE_DEVELOPMENT
  VR_AR_DEVELOPMENT
}

enum GameEngine {
  UNITY
  UNREAL
  GODOT
  CUSTOM
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LessonType {
  VIDEO
  INTERACTIVE
  QUIZ
  PROJECT
  READING
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

model Payment {
  id               String        @id @default(cuid())
  dodoPaymentId    String        @unique // Payment ID from Dodo Payments
  status           PaymentStatus @default(PENDING)
  amount           Int // Amount in smallest currency unit (cents)
  currency         String        @default("USD")
  paymentMethod    String?
  discountCode     String?
  metadata         String? // JSON metadata from Dodo
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  completedAt      DateTime?

  user       User        @relation(fields: [userId], references: [id])
  userId     String
  course     Course      @relation(fields: [courseId], references: [id])
  courseId   String
  licenseKey LicenseKey?
}

model LicenseKey {
  id                String           @id @default(cuid())
  key               String           @unique
  dodoLicenseKeyId  String?          @unique // License key ID from Dodo
  status            LicenseKeyStatus @default(ACTIVE)
  activationsLimit  Int?
  activationsCount  Int              @default(0)
  expiresAt         DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
  payment  Payment? @relation(fields: [paymentId], references: [id])
  paymentId String? @unique

  @@unique([userId, courseId])
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
  PROCESSING
  REQUIRES_PAYMENT_METHOD
}

enum LicenseKeyStatus {
  ACTIVE
  EXPIRED
  DISABLED
  REVOKED
}