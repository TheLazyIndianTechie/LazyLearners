name: Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - staging
          - production
      target_version:
        description: 'Target commit SHA or version to rollback to (leave empty for previous deployment)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

jobs:
  # Validate rollback request
  validate:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    outputs:
      target-sha: ${{ steps.determine.outputs.target-sha }}
      current-sha: ${{ steps.determine.outputs.current-sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine target version
        id: determine
        run: |
          # Get current deployment SHA
          CURRENT_SHA=$(git rev-parse HEAD)
          echo "current-sha=$CURRENT_SHA" >> $GITHUB_OUTPUT

          if [ -n "${{ inputs.target_version }}" ]; then
            # Use provided version
            TARGET_SHA="${{ inputs.target_version }}"
          else
            # Get previous commit
            TARGET_SHA=$(git rev-parse HEAD~1)
          fi

          # Verify target SHA exists
          if ! git cat-file -e $TARGET_SHA^{commit} 2>/dev/null; then
            echo "❌ Error: Target SHA $TARGET_SHA does not exist"
            exit 1
          fi

          echo "target-sha=$TARGET_SHA" >> $GITHUB_OUTPUT
          echo "Rolling back from $CURRENT_SHA to $TARGET_SHA"

      - name: Verify target is older than current
        run: |
          TARGET_DATE=$(git show -s --format=%ct ${{ steps.determine.outputs.target-sha }})
          CURRENT_DATE=$(git show -s --format=%ct ${{ steps.determine.outputs.current-sha }})

          if [ $TARGET_DATE -gt $CURRENT_DATE ]; then
            echo "⚠️ Warning: Target commit is newer than current. This is unusual for a rollback."
          fi

      - name: Get deployment history
        uses: actions/github-script@v7
        with:
          script: |
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: '${{ inputs.environment }}',
              per_page: 10
            });

            console.log(`Found ${deployments.data.length} recent deployments for ${{ inputs.environment }}`);

            for (const deployment of deployments.data.slice(0, 5)) {
              console.log(`- ${deployment.sha} (${deployment.created_at})`);
            }

  # Create rollback deployment record
  create-deployment:
    name: Create Rollback Deployment
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      deployment-id: ${{ steps.create.outputs.deployment-id }}
    steps:
      - name: Create deployment record
        id: create
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ needs.validate.outputs.target-sha }}',
              environment: '${{ inputs.environment }}',
              description: 'Rollback deployment - ${{ inputs.reason }}',
              required_contexts: [],
              auto_merge: false
            });

            core.setOutput('deployment-id', deployment.data.id);

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'in_progress',
              description: 'Rollback in progress'
            });

            return deployment.data.id;

  # Build the target version
  build:
    name: Build Target Version
    runs-on: ubuntu-latest
    needs: [validate, create-deployment]
    steps:
      - name: Checkout target version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.target-sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ inputs.environment == 'staging' && secrets.STAGING_DATABASE_URL || secrets.PRODUCTION_DATABASE_URL }}
          SKIP_ENV_VALIDATION: true

      - name: Create version marker
        run: |
          echo "ROLLBACK-${{ needs.validate.outputs.target-sha }}-$(date +%s)" > version.txt

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: rollback-build-${{ needs.validate.outputs.target-sha }}
          path: |
            .next/
            public/
            package.json
            package-lock.json
            prisma/
            version.txt
          retention-days: 7

  # Deploy the rollback
  deploy:
    name: Deploy Rollback
    runs-on: ubuntu-latest
    needs: [validate, create-deployment, build]
    environment:
      name: ${{ inputs.environment }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout target version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.target-sha }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: rollback-build-${{ needs.validate.outputs.target-sha }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          npm install -g vercel

          APP_URL="${{ inputs.environment == 'staging' && secrets.STAGING_APP_URL || secrets.PRODUCTION_APP_URL }}"
          DATABASE_URL="${{ inputs.environment == 'staging' && secrets.STAGING_DATABASE_URL || secrets.PRODUCTION_DATABASE_URL }}"
          CLERK_KEY="${{ inputs.environment == 'staging' && secrets.STAGING_CLERK_SECRET_KEY || secrets.PRODUCTION_CLERK_SECRET_KEY }}"

          DEPLOYMENT_URL=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }} \
            --env ENVIRONMENT=${{ inputs.environment }} \
            --env DATABASE_URL="$DATABASE_URL" \
            --env NEXT_PUBLIC_APP_URL="$APP_URL" \
            --env CLERK_SECRET_KEY="$CLERK_KEY" \
            --env RESEND_API_KEY="${{ secrets.RESEND_API_KEY }}" \
            --build-env DATABASE_URL="$DATABASE_URL" \
            ${{ inputs.environment == 'production' && '--prod' || '' }} \
            --yes)

          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed rollback to: $DEPLOYMENT_URL"

      - name: Set alias
        run: |
          ALIAS="${{ inputs.environment == 'staging' && 'staging-lazygamedevs.vercel.app' || 'lazygamedevs.vercel.app' }}"

          vercel alias set ${{ steps.deploy.outputs.url }} $ALIAS \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --scope=${{ secrets.VERCEL_ORG_ID }}

  # Health checks
  health-check:
    name: Verify Rollback Health
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          APP_URL="${{ inputs.environment == 'staging' && secrets.STAGING_APP_URL || secrets.PRODUCTION_APP_URL }}"
          MAX_ATTEMPTS=10
          ATTEMPT=0

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            echo "Health check attempt $((ATTEMPT + 1))/$MAX_ATTEMPTS"

            STATUS=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL/api/health || echo "000")

            if [ "$STATUS" = "200" ]; then
              echo "✅ Rollback health check passed!"
              exit 0
            fi

            echo "Status: $STATUS - Waiting before retry..."
            ATTEMPT=$((ATTEMPT + 1))
            [ $ATTEMPT -lt $MAX_ATTEMPTS ] && sleep 10
          done

          echo "❌ Rollback health check failed"
          exit 1

      - name: Run smoke tests
        run: |
          APP_URL="${{ inputs.environment == 'staging' && secrets.STAGING_APP_URL || secrets.PRODUCTION_APP_URL }}"

          echo "Running post-rollback smoke tests..."

          # Test homepage
          curl -f $APP_URL || exit 1

          # Test API health
          curl -f $APP_URL/api/health || exit 1

          echo "✅ Smoke tests passed!"

  # Update status
  finalize:
    name: Finalize Rollback
    runs-on: ubuntu-latest
    needs: [validate, create-deployment, deploy, health-check]
    if: always()
    steps:
      - name: Update deployment status - Success
        if: needs.health-check.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.create-deployment.outputs.deployment-id }},
              state: 'success',
              environment_url: '${{ inputs.environment == 'staging' && secrets.STAGING_APP_URL || secrets.PRODUCTION_APP_URL }}',
              description: 'Rollback completed successfully',
              auto_inactive: true
            });

      - name: Update deployment status - Failure
        if: needs.health-check.result != 'success'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.create-deployment.outputs.deployment-id }},
              state: 'failure',
              description: 'Rollback failed - manual intervention required'
            });

  # Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [validate, create-deployment, health-check]
    if: always()
    steps:
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "${{ needs.health-check.result == 'success' && '✅ Rollback Successful' || '❌ Rollback Failed' }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ needs.health-check.result == 'success' && 'Rollback Successful' || 'Rollback Failed' }}* ${{ needs.health-check.result == 'success' && '✅' || '❌' }}\n\n*Environment:* ${{ inputs.environment }}\n*Target SHA:* <${{ github.server_url }}/${{ github.repository }}/commit/${{ needs.validate.outputs.target-sha }}|${{ needs.validate.outputs.target-sha }}>\n*Reason:* ${{ inputs.reason }}\n*Triggered by:* ${{ github.actor }}\n*Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Notify Discord
        run: |
          if [ "${{ needs.health-check.result }}" = "success" ]; then
            STATUS="✅ Successful"
            COLOR="3066993"
          else
            STATUS="❌ Failed"
            COLOR="15158332"
          fi

          curl -X POST ${{ secrets.DISCORD_WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"Rollback $STATUS\",
                \"description\": \"**Environment:** ${{ inputs.environment }}\\n**Reason:** ${{ inputs.reason }}\\n**Target SHA:** ${{ needs.validate.outputs.target-sha }}\\n**Triggered by:** ${{ github.actor }}\",
                \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
                \"color\": $COLOR
              }]
            }" || echo "Discord notification failed"

      - name: Create incident issue (on failure)
        if: needs.health-check.result != 'success'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 INCIDENT: Rollback Failed - ${{ inputs.environment }}',
              body: `## Rollback Failure Incident

              **Environment:** ${{ inputs.environment }}
              **Target SHA:** ${{ needs.validate.outputs.target-sha }}
              **Reason for Rollback:** ${{ inputs.reason }}
              **Triggered by:** @${{ github.actor }}

              ### Details
              The rollback deployment failed health checks and requires immediate attention.

              **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

              ### Action Required
              - [ ] Investigate health check failures
              - [ ] Check application logs
              - [ ] Verify database state
              - [ ] Consider manual intervention

              cc: @${{ github.repository_owner }}`,
              labels: ['incident', 'deployment', 'urgent']
            });
